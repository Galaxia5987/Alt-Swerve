package frc.robot.generated;

import static edu.wpi.first.units.Units.*;
import static frc.robot.ConstantsKt.ALT_ROBORIO_SERIAL;

import com.ctre.phoenix6.CANBus;
import com.ctre.phoenix6.configs.*;
import com.ctre.phoenix6.signals.StaticFeedforwardSignValue;
import com.ctre.phoenix6.swerve.SwerveDrivetrainConstants;
import com.ctre.phoenix6.swerve.SwerveModuleConstants;
import com.ctre.phoenix6.swerve.SwerveModuleConstants.ClosedLoopOutputType;
import com.ctre.phoenix6.swerve.SwerveModuleConstants.SteerFeedbackType;
import com.ctre.phoenix6.swerve.SwerveModuleConstantsFactory;
import edu.wpi.first.units.measure.*;
import frc.robot.ConstantsKt;

// Generated by the Tuner X Swerve Project Generator
// https://v6.docs.ctr-electronics.com/en/stable/docs/tuner/tuner-swerve/index.html
public class TunerConstants {
    // Both sets of gains need to be tuned to your individual robot.

    private static double[] offsets;
    // The steer motor uses any SwerveModule.SteerRequestType control request with the
    // output type specified by SwerveModuleConstants.SteerMotorClosedLoopOutput
    private static Slot0Configs steerGains;
    // When using closed-loop control, the drive motor uses the control
    // output type specified by SwerveModuleConstants.DriveMotorClosedLoopOutput
    private static Slot0Configs driveGains;

    // The closed-loop output type to use for the steer motors;
    // This affects the PID/FF gains for the steer motors
    private static ClosedLoopOutputType kSteerClosedLoopOutput;
    // The closed-loop output type to use for the drive motors;
    // This affects the PID/FF gains for the drive motors
    private static ClosedLoopOutputType kDriveClosedLoopOutput;

    // The remote sensor feedback type to use for the steer motors;
    // When not Pro-licensed, FusedCANcoder/SyncCANcoder automatically fall back to RemoteCANcoder
    private static final SteerFeedbackType kSteerFeedbackType = SteerFeedbackType.FusedCANcoder;

    // The stator current at which the wheels start to slip;
    // This needs to be tuned to your individual robot
    private static Current kSlipCurrent;

    // Initial configs for the drive and steer motors and the CANcoder; these cannot be null.
    // Some configs will be overwritten; check the `with*InitialConfigs()` API documentation.
    private static TalonFXConfiguration driveInitialConfigs;
    private static TalonFXConfiguration steerInitialConfigs;

    private static final CANcoderConfiguration cancoderInitialConfigs = new CANcoderConfiguration();
    // Configs for the Pigeon 2; leave this null to skip applying Pigeon 2 configs
    private static final Pigeon2Configuration pigeonConfigs = null;

    // CAN bus that the devices are located on;
    // All swerve devices must share the same CAN bus
    public static CANBus kCANBus;

    // Theoretical free speed (m/s) at 12 V applied output;
    // This needs to be tuned to your individual robot
    public static LinearVelocity kSpeedAt12Volts;

    // Every 1 rotation of the azimuth results in kCoupleRatio drive motor turns;
    // This may need to be tuned to your individual robot
    private static double kCoupleRatio;

    private static double kDriveGearRatio;
    private static double kSteerGearRatio;
    private static Distance kWheelRadius;

    private static boolean kInvertLeftSide;
    private static boolean kInvertRightSide;

    private static int kPigeonId;

    // These are only used for simulation
    private static double kSteerInertia;
    private static double kDriveInertia;
    // Simulated voltage necessary to overcome friction
    private static Voltage kSteerFrictionVoltage;
    private static Voltage kDriveFrictionVoltage;

    public static void init() {
        if (ConstantsKt.getROBORIO_SERIAL_NUMBER().equals(ALT_ROBORIO_SERIAL)) {
            offsets =
                    new double[] {
                        5.393476450205914, 5.3627968344482015, -3.5619033894704586, -1.1965050145508
                    };

            steerGains =
                    new Slot0Configs()
                            .withKP(330)
                            .withKI(1)
                            .withKD(20)
                            .withKS(0)
                            .withKV(0)
                            .withKA(0)
                            .withStaticFeedforwardSign(
                                    StaticFeedforwardSignValue.UseClosedLoopSign);
            driveGains =
                    new Slot0Configs()
                            .withKP(30)
                            .withKI(0)
                            .withKD(0)
                            .withKS(2.66447)
                            .withKV(1.18028);

            kSteerClosedLoopOutput = ClosedLoopOutputType.TorqueCurrentFOC;
            kDriveClosedLoopOutput = ClosedLoopOutputType.TorqueCurrentFOC;

            kSlipCurrent = Amps.of(80.0);

            driveInitialConfigs = new TalonFXConfiguration();
            steerInitialConfigs =
                    new TalonFXConfiguration()
                            .withCurrentLimits(
                                    new CurrentLimitsConfigs()
                                            .withStatorCurrentLimit(60)
                                            .withStatorCurrentLimitEnable(true));

            kCANBus = new CANBus("rio", "./logs/example.hoot");

            kSpeedAt12Volts = MetersPerSecond.of(4.5);

            kCoupleRatio = 3.5;

            kDriveGearRatio = 4.41;
            kSteerGearRatio = 11.3142;
            kWheelRadius = Centimeter.of(5.1);

            kInvertLeftSide = true;
            kInvertRightSide = true;

            kPigeonId = 1;

            // These are only used for simulation
            kSteerInertia = 0.004;
            kDriveInertia = 0.025;
            // Simulated voltage necessary to overcome friction
            kSteerFrictionVoltage = Volts.of(0.25);
            kDriveFrictionVoltage = Volts.of(0.25);

            // Front Left
            kFrontLeftDriveMotorId = 2;
            kFrontLeftSteerMotorId = 1;
            kFrontLeftEncoderId = 10;
            kFrontLeftEncoderOffset = Radians.of(-offsets[0]);
            kFrontLeftSteerMotorInverted = true;
            kFrontLeftCANcoderInverted = false;

            kFrontLeftXPos = Meters.of(0.24);
            kFrontLeftYPos = Meters.of(0.24);

            // Front Right
            kFrontRightDriveMotorId = 4;
            kFrontRightSteerMotorId = 3;
            kFrontRightEncoderId = 20;
            kFrontRightEncoderOffset = Radians.of(-offsets[1]);
            kFrontRightSteerMotorInverted = true;
            kFrontRightCANcoderInverted = false;

            kFrontRightXPos = Meters.of(0.24);
            kFrontRightYPos = Meters.of(-0.24);

            // Back Left
            kBackLeftDriveMotorId = 6;
            kBackLeftSteerMotorId = 5;
            kBackLeftEncoderId = 30;
            kBackLeftEncoderOffset = Radians.of(-offsets[2]);
            kBackLeftSteerMotorInverted = true;
            kBackLeftCANcoderInverted = false;

            kBackLeftXPos = Meters.of(-0.24);
            kBackLeftYPos = Meters.of(0.24);

            // Back Right
            kBackRightDriveMotorId = 8;
            kBackRightSteerMotorId = 7;
            kBackRightEncoderId = 40;
            kBackRightEncoderOffset = Radians.of(-offsets[3]);
            kBackRightSteerMotorInverted = true;
            kBackRightCANcoderInverted = false;

            kBackRightXPos = Meters.of(-0.24);
            kBackRightYPos = Meters.of(-0.24);
        } else { // TODO: calibrate
            offsets =
                    new double[] {
                        5.393476450205914, 5.3627968344482015, -3.5619033894704586, -1.1965050145508
                    };

            steerGains =
                    new Slot0Configs()
                            .withKP(330)
                            .withKI(1)
                            .withKD(20)
                            .withKS(0)
                            .withKV(0)
                            .withKA(0)
                            .withStaticFeedforwardSign(
                                    StaticFeedforwardSignValue.UseClosedLoopSign);
            driveGains =
                    new Slot0Configs()
                            .withKP(30)
                            .withKI(0)
                            .withKD(0)
                            .withKS(2.66447)
                            .withKV(1.18028);

            kSteerClosedLoopOutput = ClosedLoopOutputType.TorqueCurrentFOC;
            kDriveClosedLoopOutput = ClosedLoopOutputType.TorqueCurrentFOC;

            kSlipCurrent = Amps.of(80.0);

            driveInitialConfigs = new TalonFXConfiguration();
            steerInitialConfigs =
                    new TalonFXConfiguration()
                            .withCurrentLimits(
                                    new CurrentLimitsConfigs()
                                            .withStatorCurrentLimit(60)
                                            .withStatorCurrentLimitEnable(true));

            kCANBus = new CANBus("rio", "./logs/example.hoot");

            kSpeedAt12Volts = MetersPerSecond.of(4.5);

            kCoupleRatio = 3.5;

            kDriveGearRatio = 4.41;
            kSteerGearRatio = 11.3142;
            kWheelRadius = Centimeter.of(5.1);

            kInvertLeftSide = true;
            kInvertRightSide = true;

            kPigeonId = 1;

            // These are only used for simulation
            kSteerInertia = 0.004;
            kDriveInertia = 0.025;
            // Simulated voltage necessary to overcome friction
            kSteerFrictionVoltage = Volts.of(0.25);
            kDriveFrictionVoltage = Volts.of(0.25);

            // Front Left
            kFrontLeftDriveMotorId = 2;
            kFrontLeftSteerMotorId = 1;
            kFrontLeftEncoderId = 10;
            kFrontLeftEncoderOffset = Radians.of(-offsets[0]);
            kFrontLeftSteerMotorInverted = true;
            kFrontLeftCANcoderInverted = false;

            kFrontLeftXPos = Meters.of(0.24);
            kFrontLeftYPos = Meters.of(0.24);

            // Front Right
            kFrontRightDriveMotorId = 4;
            kFrontRightSteerMotorId = 3;
            kFrontRightEncoderId = 20;
            kFrontRightEncoderOffset = Radians.of(-offsets[1]);
            kFrontRightSteerMotorInverted = true;
            kFrontRightCANcoderInverted = false;

            kFrontRightXPos = Meters.of(0.24);
            kFrontRightYPos = Meters.of(-0.24);

            // Back Left
            kBackLeftDriveMotorId = 6;
            kBackLeftSteerMotorId = 5;
            kBackLeftEncoderId = 30;
            kBackLeftEncoderOffset = Radians.of(-offsets[2]);
            kBackLeftSteerMotorInverted = true;
            kBackLeftCANcoderInverted = false;

            kBackLeftXPos = Meters.of(-0.24);
            kBackLeftYPos = Meters.of(0.24);

            // Back Right
            kBackRightDriveMotorId = 8;
            kBackRightSteerMotorId = 7;
            kBackRightEncoderId = 40;
            kBackRightEncoderOffset = Radians.of(-offsets[3]);
            kBackRightSteerMotorInverted = true;
            kBackRightCANcoderInverted = false;

            kBackRightXPos = Meters.of(-0.24);
            kBackRightYPos = Meters.of(-0.24);
        }
    }

    public static final SwerveDrivetrainConstants DrivetrainConstants =
            new SwerveDrivetrainConstants()
                    .withCANBusName(kCANBus.getName())
                    .withPigeon2Id(kPigeonId)
                    .withPigeon2Configs(pigeonConfigs);

    private static final SwerveModuleConstantsFactory ConstantCreator =
            new SwerveModuleConstantsFactory()
                    .withDriveMotorGearRatio(kDriveGearRatio)
                    .withSteerMotorGearRatio(kSteerGearRatio)
                    .withCouplingGearRatio(kCoupleRatio)
                    .withWheelRadius(kWheelRadius)
                    .withSteerMotorGains(steerGains)
                    .withDriveMotorGains(driveGains)
                    .withSteerMotorClosedLoopOutput(kSteerClosedLoopOutput)
                    .withDriveMotorClosedLoopOutput(kDriveClosedLoopOutput)
                    .withSlipCurrent(kSlipCurrent)
                    .withSpeedAt12Volts(kSpeedAt12Volts)
                    .withFeedbackSource(kSteerFeedbackType)
                    .withDriveMotorInitialConfigs(driveInitialConfigs)
                    .withSteerMotorInitialConfigs(steerInitialConfigs)
                    .withCANcoderInitialConfigs(cancoderInitialConfigs)
                    .withSteerInertia(kSteerInertia)
                    .withDriveInertia(kDriveInertia)
                    .withSteerFrictionVoltage(kSteerFrictionVoltage)
                    .withDriveFrictionVoltage(kDriveFrictionVoltage);

    // Front Left
    private static int kFrontLeftDriveMotorId;
    private static int kFrontLeftSteerMotorId;
    private static int kFrontLeftEncoderId;
    private static Angle kFrontLeftEncoderOffset;
    private static boolean kFrontLeftSteerMotorInverted;
    private static boolean kFrontLeftCANcoderInverted;

    private static Distance kFrontLeftXPos;
    private static Distance kFrontLeftYPos;

    // Front Right
    private static int kFrontRightDriveMotorId;
    private static int kFrontRightSteerMotorId;
    private static int kFrontRightEncoderId;
    private static Angle kFrontRightEncoderOffset;
    private static boolean kFrontRightSteerMotorInverted;
    private static boolean kFrontRightCANcoderInverted;

    private static Distance kFrontRightXPos;
    private static Distance kFrontRightYPos;

    // Back Left
    private static int kBackLeftDriveMotorId;
    private static int kBackLeftSteerMotorId;
    private static int kBackLeftEncoderId;
    private static Angle kBackLeftEncoderOffset;
    private static boolean kBackLeftSteerMotorInverted;
    private static boolean kBackLeftCANcoderInverted;

    private static Distance kBackLeftXPos;
    private static Distance kBackLeftYPos;

    // Back Right
    private static int kBackRightDriveMotorId;
    private static int kBackRightSteerMotorId;
    private static int kBackRightEncoderId;
    private static Angle kBackRightEncoderOffset;
    private static boolean kBackRightSteerMotorInverted;
    private static boolean kBackRightCANcoderInverted;

    private static Distance kBackRightXPos;
    private static Distance kBackRightYPos;

    public static final SwerveModuleConstants FrontLeft =
            ConstantCreator.createModuleConstants(
                    kFrontLeftSteerMotorId,
                    kFrontLeftDriveMotorId,
                    kFrontLeftEncoderId,
                    kFrontLeftEncoderOffset,
                    kFrontLeftXPos,
                    kFrontLeftYPos,
                    kInvertLeftSide,
                    kFrontLeftSteerMotorInverted,
                    kFrontLeftCANcoderInverted);
    public static final SwerveModuleConstants FrontRight =
            ConstantCreator.createModuleConstants(
                    kFrontRightSteerMotorId,
                    kFrontRightDriveMotorId,
                    kFrontRightEncoderId,
                    kFrontRightEncoderOffset,
                    kFrontRightXPos,
                    kFrontRightYPos,
                    kInvertRightSide,
                    kFrontRightSteerMotorInverted,
                    kFrontRightCANcoderInverted);
    public static final SwerveModuleConstants BackLeft =
            ConstantCreator.createModuleConstants(
                    kBackLeftSteerMotorId,
                    kBackLeftDriveMotorId,
                    kBackLeftEncoderId,
                    kBackLeftEncoderOffset,
                    kBackLeftXPos,
                    kBackLeftYPos,
                    kInvertLeftSide,
                    kBackLeftSteerMotorInverted,
                    kBackLeftCANcoderInverted);
    public static final SwerveModuleConstants BackRight =
            ConstantCreator.createModuleConstants(
                    kBackRightSteerMotorId,
                    kBackRightDriveMotorId,
                    kBackRightEncoderId,
                    kBackRightEncoderOffset,
                    kBackRightXPos,
                    kBackRightYPos,
                    kInvertRightSide,
                    kBackRightSteerMotorInverted,
                    kBackRightCANcoderInverted);
    // /**
    //  * Creates a CommandSwerveDrivetrain instance.
    //  * This should only be called once in your robot program,.
    //  */
    // public static CommandSwerveDrivetrain createDrivetrain() {
    //     return new CommandSwerveDrivetrain(
    //         DrivetrainConstants, FrontLeft, FrontRight, BackLeft, BackRight
    //     );
    // }
}
